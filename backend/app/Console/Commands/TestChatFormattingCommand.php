<?php

namespace App\Console\Commands;

use App\Services\ChatService;
use App\Services\TelegramFormatterService;
use App\Services\MarkdownFormatterService;
use App\Models\User;
use Illuminate\Console\Command;

class TestChatFormattingCommand extends Command
{
    protected $signature = 'test:chat-formatting {--user-id=1}';
    protected $description = '–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –æ—Ç–≤–µ—Ç–æ–≤ —á–∞—Ç–∞';

    public function handle()
    {
        $userId = $this->option('user-id');
        $user = User::find($userId);
        
        if (!$user) {
            $this->error("–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å ID {$userId} –Ω–µ –Ω–∞–π–¥–µ–Ω");
            return 1;
        }

        $this->info("üß™ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –æ—Ç–≤–µ—Ç–æ–≤ —á–∞—Ç–∞ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: {$user->name}");
        
        $testQuestions = [
            '–†–∞—Å—Å–∫–∞–∂–∏ –æ Laravel —Ñ—Ä–µ–π–º–≤–æ—Ä–∫–µ',
            '–ö–∞–∫ —Å–æ–∑–¥–∞—Ç—å –º–∏–≥—Ä–∞—Ü–∏—é –≤ Laravel?',
            '–û–±—ä—è—Å–Ω–∏ –ø—Ä–∏–Ω—Ü–∏–ø—ã —Ä–∞–±–æ—Ç—ã MVC',
        ];

        $chatService = app(ChatService::class);

        foreach ($testQuestions as $index => $question) {
            $this->info("\n--- –¢–µ—Å—Ç –≤–æ–ø—Ä–æ—Å " . ($index + 1) . " ---");
            $this->line("–í–æ–ø—Ä–æ—Å: {$question}");
            
            $this->line("‚è≥ –ü–æ–ª—É—á–∞–µ–º –æ—Ç–≤–µ—Ç –æ—Ç –ò–ò...");
            $response = $chatService->processMessage($user, $question);
            
            if (!$response) {
                $this->error("–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –æ—Ç–≤–µ—Ç");
                continue;
            }

            $this->line("\nüìù –ò—Å—Ö–æ–¥–Ω—ã–π –æ—Ç–≤–µ—Ç:");
            $this->line(mb_substr($response, 0, 200) . (mb_strlen($response) > 200 ? '...' : ''));
            
            // –¢–µ—Å—Ç–∏—Ä—É–µ–º —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –¥–ª—è Telegram
            $telegramFormatted = TelegramFormatterService::formatForTelegram($response, false);
            $this->line("\nüì± Telegram —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ:");
            $this->line(mb_substr($telegramFormatted['text'], 0, 200) . (mb_strlen($telegramFormatted['text']) > 200 ? '...' : ''));
            
            // –¢–µ—Å—Ç–∏—Ä—É–µ–º HTML —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –¥–ª—è –≤–µ–±-–∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞
            $hasMarkdown = MarkdownFormatterService::hasMarkdown($response);
            $this->line("\nüåê –í–µ–±-–∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å (—Å–æ–¥–µ—Ä–∂–∏—Ç markdown: " . ($hasMarkdown ? '–î–∞' : '–ù–µ—Ç') . "):");
            
            if ($hasMarkdown) {
                $htmlFormatted = MarkdownFormatterService::convertMarkdownToHtml($response);
                $plainHtml = strip_tags($htmlFormatted);
                $this->line(mb_substr($plainHtml, 0, 200) . (mb_strlen($plainHtml) > 200 ? '...' : ''));
            } else {
                $this->line("–û–±—ã—á–Ω—ã–π —Ç–µ–∫—Å—Ç –±–µ–∑ —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è");
            }
            
            // –¢–µ—Å—Ç–∏—Ä—É–µ–º —Ä–∞–∑–±–∏–≤–∫—É –¥–ª–∏–Ω–Ω—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π
            $parts = TelegramFormatterService::splitLongMessage($response);
            $this->line("\nüìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:");
            $this->line("- –î–ª–∏–Ω–∞ –æ—Ç–≤–µ—Ç–∞: " . mb_strlen($response) . " —Å–∏–º–≤–æ–ª–æ–≤");
            $this->line("- –ß–∞—Å—Ç–µ–π –¥–ª—è Telegram: " . count($parts));
            $this->line("- –°–æ–¥–µ—Ä–∂–∏—Ç markdown: " . ($hasMarkdown ? '–î–∞' : '–ù–µ—Ç'));
        }
        
        $this->info("\n‚úÖ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–æ!");
        return 0;
    }
}