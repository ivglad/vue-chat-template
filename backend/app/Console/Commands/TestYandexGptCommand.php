<?php

namespace App\Console\Commands;

use App\Services\YandexGptService;
use Illuminate\Console\Command;

class TestYandexGptCommand extends Command
{
    /**
     * The name and signature of the console command.
     *
     * @var string
     */
    protected $signature = 'test:yandex-gpt {--embeddings} {--completion}';

    /**
     * The console command description.
     *
     * @var string
     */
    protected $description = '–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏ —Å YandexGPT';

    public function handle(YandexGptService $yandexGptService)
    {
        $this->info('üöÄ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ YandexGPT –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏...');
        
        if ($this->option('embeddings') || (!$this->option('completion') && !$this->option('embeddings'))) {
            $this->testEmbeddings($yandexGptService);
        }
        
        if ($this->option('completion') || (!$this->option('completion') && !$this->option('embeddings'))) {
            $this->testCompletion($yandexGptService);
        }
        
        $this->info('‚úÖ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–æ!');
    }

    private function testEmbeddings(YandexGptService $yandexGptService)
    {
        $this->info("\nüìä –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ —ç–º–±–µ–¥–¥–∏–Ω–≥–æ–≤...");
        
        $testText = "–ú–∞—à–∏–Ω–Ω–æ–µ –æ–±—É—á–µ–Ω–∏–µ - —ç—Ç–æ –æ–±–ª–∞—Å—Ç—å –∏—Å–∫—É—Å—Å—Ç–≤–µ–Ω–Ω–æ–≥–æ –∏–Ω—Ç–µ–ª–ª–µ–∫—Ç–∞, –∫–æ—Ç–æ—Ä–∞—è –∏–∑—É—á–∞–µ—Ç –∞–ª–≥–æ—Ä–∏—Ç–º—ã –∏ —Å—Ç–∞—Ç–∏—Å—Ç–∏—á–µ—Å–∫–∏–µ –º–æ–¥–µ–ª–∏.";
        
        $embedding = $yandexGptService->generateEmbeddings($testText);
        
        if ($embedding) {
            $this->info("‚úÖ –≠–º–±–µ–¥–¥–∏–Ω–≥–∏ —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω—ã —É—Å–ø–µ—à–Ω–æ");
            $this->info("üìê –†–∞–∑–º–µ—Ä–Ω–æ—Å—Ç—å –≤–µ–∫—Ç–æ—Ä–∞: " . count($embedding));
            $this->info("üî¢ –ü–µ—Ä–≤—ã–µ 5 –∑–Ω–∞—á–µ–Ω–∏–π: " . implode(', ', array_slice($embedding, 0, 5)));
        } else {
            $this->error("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ —ç–º–±–µ–¥–¥–∏–Ω–≥–æ–≤");
        }
    }

    private function testCompletion(YandexGptService $yandexGptService)
    {
        $this->info("\nü§ñ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –æ—Ç–≤–µ—Ç–æ–≤...");
        
        $context = "Laravel - —ç—Ç–æ PHP —Ñ—Ä–µ–π–º–≤–æ—Ä–∫ –¥–ª—è –≤–µ–±-—Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∏. –û–Ω –∏—Å–ø–æ–ª—å–∑—É–µ—Ç –∞—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä—É MVC –∏ –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª—è–µ—Ç –º–Ω–æ–∂–µ—Å—Ç–≤–æ –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–æ–≤ –¥–ª—è –±—ã—Å—Ç—Ä–æ–π —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∏.";
        $question = "–ß—Ç–æ —Ç–∞–∫–æ–µ Laravel?";
        
        $response = $yandexGptService->generateResponse($context, $question);
        
        if ($response) {
            $this->info("‚úÖ –û—Ç–≤–µ—Ç —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω —É—Å–ø–µ—à–Ω–æ");
            $this->info("üí¨ –û—Ç–≤–µ—Ç: " . $response);
        } else {
            $this->error("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –æ—Ç–≤–µ—Ç–∞");
        }
    }
}
