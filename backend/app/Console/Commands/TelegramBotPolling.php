<?php

namespace App\Console\Commands;

use Exception;
use Illuminate\Console\Command;
use Illuminate\Support\Facades\Cache;
use Telegram\Bot\Laravel\Facades\Telegram;
use Telegram\Bot\Objects\Update;

class TelegramBotPolling extends Command
{
    use TelegramUserTrait;
    
    protected $signature = 'telegram:poll {--daemon : –ó–∞–ø—É—Å—Ç–∏—Ç—å –≤ —Ä–µ–∂–∏–º–µ –¥–µ–º–æ–Ω–∞}';
    protected $description = '–ó–∞–ø—É—Å–∫–∞–µ—Ç –ø—É–ª–∏–Ω–≥ –¥–ª—è Telegram –±–æ—Ç–∞';
    
    protected $lastUpdateId = 0;
    protected $shouldStop = false;

    public function handle()
    {
        $isDaemon = $this->option('daemon');
        
        // –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ —Å–∏–≥–Ω–∞–ª–æ–≤ –¥–ª—è –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–π –æ—Å—Ç–∞–Ω–æ–≤–∫–∏
        $this->registerSignalHandlers();
        
        // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –±–æ—Ç–∞ –∫–∞–∫ –∞–∫—Ç–∏–≤–Ω–æ–µ
        Cache::put('telegram_bot_active', true);
        Cache::put('telegram_bot_last_heartbeat', now());
        
        $this->info('–ó–∞–ø—É—Å–∫ Telegram –±–æ—Ç–∞...');

        try {
            $botInfo = Telegram::bot('mybot')->getMe();
            $this->info('–ë–æ—Ç –ø–æ–¥–∫–ª—é—á–µ–Ω: @' . $botInfo->username);
            
            while (!$this->shouldStop) {
                // –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —Å–∏–≥–Ω–∞–ª—ã
                if (function_exists('pcntl_signal_dispatch')) {
                    pcntl_signal_dispatch();
                }
                
                // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –∞–∫—Ç–∏–≤–µ–Ω –ª–∏ –±–æ—Ç
                if (!Cache::get('telegram_bot_active', false)) {
                    $this->info('–ë–æ—Ç –¥–µ–∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º. –ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ —Ä–∞–±–æ—Ç—ã...');
                    break;
                }
                
                // –û–±–Ω–æ–≤–ª—è–µ–º heartbeat
                Cache::put('telegram_bot_last_heartbeat', now());
                
                try {
                   
                    $updates = Telegram::bot('mybot')->getUpdates([
                        'offset' => $this->lastUpdateId + 1,
                        'timeout' => 30,
                    ]);
                    
                    if (count($updates) > 0) {

                        $this->info('–ü–æ–ª—É—á–µ–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–π: ' . count($updates));
                        
                        foreach ($updates as $update) {
                            $this->lastUpdateId = $update->updateId;
                            
                            // –ï—â–µ —Ä–∞–∑ –ø—Ä–æ–≤–µ—Ä—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –ø–µ—Ä–µ–¥ –æ–±—Ä–∞–±–æ—Ç–∫–æ–π –∫–∞–∂–¥–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è
                            if (!Cache::get('telegram_bot_active', false) || $this->shouldStop) {
                                $this->info('–ë–æ—Ç –¥–µ–∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω –≤–æ –≤—Ä–µ–º—è –æ–±—Ä–∞–±–æ—Ç–∫–∏. –ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ...');
                                return 0;
                            }
                            
                            // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ –≤ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ —Å–æ–æ–±—â–µ–Ω–∏–µ
                            if ($update->message) {
                                $messageText = $update->message->text ?? '';
                                
                                // –ï—Å–ª–∏ —ç—Ç–æ –∫–æ–º–∞–Ω–¥–∞, –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–º —Å–ø–æ—Å–æ–±–æ–º
                                if (strpos($messageText, '/') === 0) {
                                    Telegram::bot('mybot')->processCommand($update);
                                } else {
                                    // –ï—Å–ª–∏ —ç—Ç–æ –æ–±—ã—á–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ, –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —á–µ—Ä–µ–∑ ChatService
                                    $this->handleRegularMessage($update);
                                }
                            } else {
                                // –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –¥—Ä—É–≥–∏–µ —Ç–∏–ø—ã –æ–±–Ω–æ–≤–ª–µ–Ω–∏–π (–Ω–∞–ø—Ä–∏–º–µ—Ä, callback queries)
                                Telegram::bot('mybot')->processCommand($update);
                            }
                        }
                    }
                } catch (Exception $e) {
                    \Log::error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è: ' . $e->getMessage());
                    $this->error('–û—à–∏–±–∫–∞: ' . $e->getMessage());
                    
                    // –ï—Å–ª–∏ –Ω–µ —Ä–µ–∂–∏–º –¥–µ–º–æ–Ω–∞, –≤—ã—Ö–æ–¥–∏–º –ø—Ä–∏ –æ—à–∏–±–∫–µ
                    if (!$isDaemon) {
                        Cache::put('telegram_bot_active', false);
                        return 1;
                    }
                    
                    sleep(5);
                }
            }
            
        } catch (Exception $e) {
            \Log::error('–û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ –±–æ—Ç—É: ' . $e->getMessage());
            $this->error('–û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è: ' . $e->getMessage());
            Cache::put('telegram_bot_active', false);
            return 1;
        }
        
        // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –∫–∞–∫ –Ω–µ–∞–∫—Ç–∏–≤–Ω–æ–µ –ø—Ä–∏ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–∏
        Cache::put('telegram_bot_active', false);
        Cache::forget('telegram_bot_last_heartbeat');
        $this->info('Telegram –±–æ—Ç –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω.');
        return 0;
    }
    
    /**
     * –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ —Å–∏–≥–Ω–∞–ª–æ–≤ –¥–ª—è –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–π –æ—Å—Ç–∞–Ω–æ–≤–∫–∏
     */
    private function registerSignalHandlers(): void
    {
        if (function_exists('pcntl_signal')) {
            pcntl_signal(SIGTERM, function($signal) {
                $this->info("–ü–æ–ª—É—á–µ–Ω —Å–∏–≥–Ω–∞–ª –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è: {$signal}");
                $this->shouldStop = true;
            });
            pcntl_signal(SIGINT, function($signal) {
                $this->info("–ü–æ–ª—É—á–µ–Ω —Å–∏–≥–Ω–∞–ª –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è: {$signal}");
                $this->shouldStop = true;
            });
            pcntl_signal(SIGQUIT, function($signal) {
                $this->info("–ü–æ–ª—É—á–µ–Ω —Å–∏–≥–Ω–∞–ª –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è: {$signal}");
                $this->shouldStop = true;
            });
        }
    }

    /**
     * –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ–±—ã—á–Ω—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π (–Ω–µ –∫–æ–º–∞–Ω–¥)
     */
    private function handleRegularMessage(Update $update)
    {
        try {
            $message = $update->message;
            $telegramUser = $message->from;
            $messageText = $message->text ?? '';

            // –ù–∞–π—Ç–∏ –∏–ª–∏ —Å–æ–∑–¥–∞—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            $user = $this->findTelegramUser($telegramUser);

            if (!$user) {
                // –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω, –ø—Ä–µ–¥–ª–∞–≥–∞–µ–º –Ω–∞—á–∞—Ç—å —Å /start
                Telegram::bot('mybot')->sendMessage([
                    'chat_id' => $message->chat->id,
                    'text' => '–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —Å–Ω–∞—á–∞–ª–∞ –≤—ã–ø–æ–ª–Ω–∏—Ç–µ –∫–æ–º–∞–Ω–¥—É /start –¥–ª—è —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ –≤ —Å–∏—Å—Ç–µ–º–µ.'
                ]);
                return;
            }

            // –û–±–Ω–æ–≤–ª—è–µ–º –≤—Ä–µ–º—è –ø–æ—Å–ª–µ–¥–Ω–µ–π –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏
            $this->updateUserLastSeen($user);

            if (empty(trim($messageText))) {
                Telegram::bot('mybot')->sendMessage([
                    'chat_id' => $message->chat->id,
                    'text' => '–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –≤–∞—à –≤–æ–ø—Ä–æ—Å —Ç–µ–∫—Å—Ç–æ–º.'
                ]);
                return;
            }

            // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä "–ø–µ—á–∞—Ç–∞–µ—Ç..."
            Telegram::bot('mybot')->sendChatAction([
                'chat_id' => $message->chat->id,
                'action' => 'typing'
            ]);

            // Telegram::bot('mybot')->sendMessage([
            //     'chat_id' => $message->chat->id,
            //     'text' => '‚è≥ –û–±—Ä–∞–±–∞—Ç—ã–≤–∞—é –≤–∞—à –≤–æ–ø—Ä–æ—Å, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞ –ø–æ–¥–æ–∂–¥–∏—Ç–µ...'
            // ]);

            // –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —á–µ—Ä–µ–∑ ChatService
            $chatService = app(\App\Services\ChatService::class);
            $answer = $chatService->processMessage($user, $messageText);

            if ($answer) {
                Telegram::bot('mybot')->sendMessage([
                    'chat_id' => $message->chat->id,
                    'text' => $answer,
                    'parse_mode' => 'HTML'
                ]);
                
                // –î–æ–±–∞–≤–ª—è–µ–º —Å–ø—Ä–∞–≤–æ—á–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ –∫–æ–Ω—Ü–µ
                // if (count($messageParts) > 0) {
                //     Telegram::bot('mybot')->sendMessage([
                //         'chat_id' => $message->chat->id,
                //         'text' => "\nüí° –°–æ–≤–µ—Ç: –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ /ask –¥–ª—è –±–æ–ª–µ–µ —Ç–æ—á–Ω—ã—Ö –æ—Ç–≤–µ—Ç–æ–≤ –ø–æ –¥–æ–∫—É–º–µ–Ω—Ç–∞–º!"
                //     ]);
                // }
            } else {
                Telegram::bot('mybot')->sendMessage([
                    'chat_id' => $message->chat->id,
                    'text' => 'üòî –ò–∑–≤–∏–Ω–∏—Ç–µ, –Ω–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –æ—Ç–≤–µ—Ç –Ω–∞ –≤–∞—à –≤–æ–ø—Ä–æ—Å...'
                ]);
            }

        } catch (Exception $e) {
            \Log::error('Error in handleRegularMessage: ' . $e->getMessage(), [
                'update' => $update->toArray(),
                'exception' => $e
            ]);
            
            if (isset($message)) {
                Telegram::bot('mybot')->sendMessage([
                    'chat_id' => $message->chat->id,
                    'text' => '‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –≤–∞—à–µ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è.'
                ]);
            }
        }
    }
}