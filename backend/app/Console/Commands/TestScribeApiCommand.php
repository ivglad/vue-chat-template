<?php

namespace App\Console\Commands;

use App\Models\User;
use Illuminate\Console\Command;
use Illuminate\Support\Facades\Http;

class TestScribeApiCommand extends Command
{
    protected $signature = 'test:scribe-api {--user-id=1}';
    protected $description = '–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ API —ç–Ω–¥–ø–æ–∏–Ω—Ç–æ–≤ —á–µ—Ä–µ–∑ Scribe –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏—é';

    public function handle()
    {
        $userId = $this->option('user-id');
        $user = User::find($userId);
        
        if (!$user) {
            $this->error("–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å ID {$userId} –Ω–µ –Ω–∞–π–¥–µ–Ω");
            return 1;
        }

        $this->info("üß™ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ API —ç–Ω–¥–ø–æ–∏–Ω—Ç–∞ /chat/send");
        $this->info("üë§ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: {$user->name}");
        
        // –°–æ–∑–¥–∞–µ–º —Ç–æ–∫–µ–Ω –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
        $token = $user->createToken('test-scribe')->plainTextToken;
        $this->line("üîë –¢–æ–∫–µ–Ω —Å–æ–∑–¥–∞–Ω");

        $baseUrl = config('app.url');

        $testCases = [
            [
                'name' => '–ë–µ–∑ document_ids (–∫–∞–∫ –≤ Scribe –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏–∏)',
                'data' => [
                    'message' => '–†–∞—Å—Å–∫–∞–∂–∏ –æ —Å–æ–¥–µ—Ä–∂–∏–º–æ–º –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤'
                ]
            ],
            [
                'name' => '–° –ø—É—Å—Ç—ã–º –º–∞—Å—Å–∏–≤–æ–º document_ids',
                'data' => [
                    'message' => '–†–∞—Å—Å–∫–∞–∂–∏ –æ —Å–æ–¥–µ—Ä–∂–∏–º–æ–º –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤',
                    'document_ids' => []
                ]
            ]
        ];

        foreach ($testCases as $testCase) {
            $this->info("\n--- {$testCase['name']} ---");
            
            try {
                $response = Http::withToken($token)
                    ->withHeaders(['Accept' => 'application/json'])
                    ->post("{$baseUrl}/api/v1/chat/send", $testCase['data']);

                $this->line("HTTP Code: " . $response->status());
                
                if ($response->successful()) {
                    $data = $response->json();
                    if ($data && isset($data['success']) && $data['success']) {
                        $this->line("‚úÖ –ó–∞–ø—Ä–æ—Å —É—Å–ø–µ—à–µ–Ω");
                        $this->line("üìù –û—Ç–≤–µ—Ç: " . substr($data['data']['bot_response']['message'], 0, 100) . "...");
                        
                        $contextDocs = $data['data']['bot_response']['context_documents'];
                        if ($contextDocs) {
                            $this->line("üìö –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω—ã –¥–æ–∫—É–º–µ–Ω—Ç—ã: " . implode(', ', $contextDocs));
                        }
                    } else {
                        $this->error("‚ùå –û—à–∏–±–∫–∞ –≤ –æ—Ç–≤–µ—Ç–µ: " . ($data['message'] ?? '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞'));
                    }
                } else {
                    $this->error("‚ùå HTTP –æ—à–∏–±–∫–∞");
                    $this->line("Response: " . substr($response->body(), 0, 200) . "...");
                }
            } catch (\Exception $e) {
                $this->error("‚ùå –ò—Å–∫–ª—é—á–µ–Ω–∏–µ: " . $e->getMessage());
            }
        }

        // –£–¥–∞–ª—è–µ–º —Ç–µ—Å—Ç–æ–≤—ã–π —Ç–æ–∫–µ–Ω
        $user->tokens()->where('name', 'test-scribe')->delete();
        
        $this->info("\n‚úÖ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–æ!");
        return 0;
    }
}