<?php

namespace App\Console\Commands;

use App\Models\User;
use App\Models\Document;
use Illuminate\Console\Command;
use Illuminate\Support\Facades\Http;

class TestApiChatCommand extends Command
{
    protected $signature = 'test:api-chat {--user-id=1}';
    protected $description = '–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ API —á–∞—Ç–∞ —Å —Ä–∞–∑–ª–∏—á–Ω—ã–º–∏ –ø–∞—Ä–∞–º–µ—Ç—Ä–∞–º–∏ document_ids';

    public function handle()
    {
        $userId = $this->option('user-id');
        $user = User::find($userId);
        
        if (!$user) {
            $this->error("–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å ID {$userId} –Ω–µ –Ω–∞–π–¥–µ–Ω");
            return 1;
        }

        $this->info("üß™ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ API —á–∞—Ç–∞ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: {$user->name}");
        
        // –ü–æ–ª—É—á–∞–µ–º –¥–æ—Å—Ç—É–ø–Ω—ã–µ –¥–æ–∫—É–º–µ–Ω—Ç—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        $availableDocuments = Document::where(function ($query) use ($user) {
            $query->where('user_id', $user->id)
                ->orWhereHas('roles', function ($roleQuery) use ($user) {
                    $roleQuery->whereIn('roles.id', $user->roles->pluck('id'));
                });
        })
        ->where('embeddings_generated', true)
        ->get();

        $this->info("üìö –î–æ—Å—Ç—É–ø–Ω—ã—Ö –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤: " . $availableDocuments->count());
        
        if ($availableDocuments->isEmpty()) {
            $this->warn("‚ö†Ô∏è  –£ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤ —Å —ç–º–±–µ–¥–¥–∏–Ω–≥–∞–º–∏");
            return 0;
        }

        $availableDocuments->each(function ($doc) {
            $this->line("  - {$doc->title} (ID: {$doc->id})");
        });

        // –°–æ–∑–¥–∞–µ–º —Ç–æ–∫–µ–Ω –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è (–¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è)
        $token = $user->createToken('test-token')->plainTextToken;
        $baseUrl = config('app.url');

        $testCases = [
            [
                'name' => '–ë–µ–∑ —É–∫–∞–∑–∞–Ω–∏—è document_ids (–ø–æ–∏—Å–∫ –ø–æ –≤—Å–µ–º –¥–æ–∫—É–º–µ–Ω—Ç–∞–º)',
                'data' => [
                    'message' => '–†–∞—Å—Å–∫–∞–∂–∏ –∫—Ä–∞—Ç–∫–æ –æ —Å–æ–¥–µ—Ä–∂–∏–º–æ–º –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤'
                ]
            ],
            [
                'name' => '–° –ø—É—Å—Ç—ã–º –º–∞—Å—Å–∏–≤–æ–º document_ids',
                'data' => [
                    'message' => '–ß—Ç–æ —Å–æ–¥–µ—Ä–∂–∏—Ç—Å—è –≤ –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ö?',
                    'document_ids' => []
                ]
            ]
        ];

        // –î–æ–±–∞–≤–ª—è–µ–º —Ç–µ—Å—Ç —Å –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã–º–∏ –¥–æ–∫—É–º–µ–Ω—Ç–∞–º–∏, –µ—Å–ª–∏ –æ–Ω–∏ –µ—Å—Ç—å
        if ($availableDocuments->count() > 0) {
            $firstDocId = $availableDocuments->first()->id;
            $testCases[] = [
                'name' => "–° —É–∫–∞–∑–∞–Ω–∏–µ–º –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ –¥–æ–∫—É–º–µ–Ω—Ç–∞ (ID: {$firstDocId})",
                'data' => [
                    'message' => '–†–∞—Å—Å–∫–∞–∂–∏ –æ —Å–æ–¥–µ—Ä–∂–∏–º–æ–º —ç—Ç–æ–≥–æ –¥–æ–∫—É–º–µ–Ω—Ç–∞',
                    'document_ids' => [$firstDocId]
                ]
            ];
        }

        foreach ($testCases as $index => $testCase) {
            $this->info("\n--- –¢–µ—Å—Ç –∫–µ–π—Å " . ($index + 1) . ": {$testCase['name']} ---");
            
            try {
                $response = Http::withToken($token)
                    ->post("{$baseUrl}/api/v1/chat/send", $testCase['data']);

                if ($response->successful()) {
                    $data = $response->json();
                    $this->line("‚úÖ –ó–∞–ø—Ä–æ—Å —É—Å–ø–µ—à–µ–Ω");
                    $this->line("üìù –û—Ç–≤–µ—Ç –±–æ—Ç–∞: " . mb_substr($data['data']['bot_response']['message'], 0, 100) . '...');
                    
                    $contextDocs = $data['data']['bot_response']['context_documents'];
                    if ($contextDocs) {
                        $this->line("üìö –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω—ã –¥–æ–∫—É–º–µ–Ω—Ç—ã: " . implode(', ', $contextDocs));
                    } else {
                        $this->line("üìö –ö–æ–Ω—Ç–µ–∫—Å—Ç –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤: –Ω–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω");
                    }
                } else {
                    $this->error("‚ùå –û—à–∏–±–∫–∞ –∑–∞–ø—Ä–æ—Å–∞: " . $response->status());
                    $this->line($response->body());
                }
            } catch (\Exception $e) {
                $this->error("‚ùå –ò—Å–∫–ª—é—á–µ–Ω–∏–µ: " . $e->getMessage());
            }
        }

        // –£–¥–∞–ª—è–µ–º —Ç–µ—Å—Ç–æ–≤—ã–π —Ç–æ–∫–µ–Ω
        $user->tokens()->where('name', 'test-token')->delete();
        
        $this->info("\n‚úÖ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–æ!");
        return 0;
    }
}