<?php

namespace App\Services;

class TelegramFormatterService
{
    /**
     * –≠–∫—Ä–∞–Ω–∏—Ä—É–µ—Ç —Å–ø–µ—Ü–∏–∞–ª—å–Ω—ã–µ —Å–∏–º–≤–æ–ª—ã Markdown –¥–ª—è Telegram
     */
    public static function escapeMarkdown(string $text): string
    {
        // –°–ø–∏—Å–æ–∫ —Å–∏–º–≤–æ–ª–æ–≤, –∫–æ—Ç–æ—Ä—ã–µ –Ω—É–∂–Ω–æ —ç–∫—Ä–∞–Ω–∏—Ä–æ–≤–∞—Ç—å –≤ Telegram Markdown
        $specialChars = ['.', '!'];
        
        foreach ($specialChars as $char) {
            $text = str_replace($char, '\\' . $char, $text);
        }
        
        return $text;
    }

    /**
     * –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ—Ç —Ç–µ–∫—Å—Ç –¥–ª—è –±–µ–∑–æ–ø–∞—Å–Ω–æ–π –æ—Ç–ø—Ä–∞–≤–∫–∏ –≤ Telegram
     */
    public static function formatForTelegram(string $text, bool $useMarkdown = false): array
    {
        if (!$useMarkdown) {
            // –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º markdown –≤ –æ–±—ã—á–Ω—ã–π —Ç–µ–∫—Å—Ç –¥–ª—è Telegram
            $plainText = self::convertMarkdownToPlainText($text);
            return [
                'text' => $plainText,
                'parse_mode' => null
            ];
        }

        // –ü—ã—Ç–∞–µ–º—Å—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å —ç–∫—Ä–∞–Ω–∏—Ä–æ–≤–∞–Ω–Ω—ã–π markdown
        $escapedText = self::escapeMarkdown($text);
        
        return [
            'text' => $escapedText,
            'parse_mode' => 'MarkdownV2'
        ];
    }

    /**
     * –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ—Ç markdown –≤ —á–∏—Ç–∞–µ–º—ã–π –æ–±—ã—á–Ω—ã–π —Ç–µ–∫—Å—Ç
     */
    public static function convertMarkdownToPlainText(string $text): string
    {
        // –ó–∞–≥–æ–ª–æ–≤–∫–∏
        $text = preg_replace('/^#{1,6}\s+(.+)$/m', 'üìå $1', $text);
        
        // –ñ–∏—Ä–Ω—ã–π —Ç–µ–∫—Å—Ç
        $text = preg_replace('/\*\*(.*?)\*\*/', 'üî∏ $1', $text);
        $text = preg_replace('/__(.*?)__/', 'üî∏ $1', $text);
        
        // –ö—É—Ä—Å–∏–≤
        $text = preg_replace('/\*(.*?)\*/', '$1', $text);
        $text = preg_replace('/_(.*?)_/', '$1', $text);
        
        // –ö–æ–¥
        $text = preg_replace('/`([^`]+)`/', 'üíª $1', $text);
        $text = preg_replace('/```[\s\S]*?```/', 'üíª [–ë–ª–æ–∫ –∫–æ–¥–∞]', $text);
        
        // –°—Å—ã–ª–∫–∏
        $text = preg_replace('/\[([^\]]+)\]\([^\)]+\)/', 'üîó $1', $text);
        
        // –°–ø–∏—Å–∫–∏
        $text = preg_replace('/^[\s]*[-\*\+]\s+(.+)$/m', '‚Ä¢ $1', $text);
        $text = preg_replace('/^[\s]*\d+\.\s+(.+)$/m', 'üî¢ $1', $text);
        
        // –¶–∏—Ç–∞—Ç—ã
        $text = preg_replace('/^>\s+(.+)$/m', 'üí¨ $1', $text);
        
        // –ì–æ—Ä–∏–∑–æ–Ω—Ç–∞–ª—å–Ω—ã–µ –ª–∏–Ω–∏–∏
        $text = preg_replace('/^[-\*_]{3,}$/m', '‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ', $text);
        
        // –£–±–∏—Ä–∞–µ–º –ª–∏—à–Ω–∏–µ –ø–µ—Ä–µ–Ω–æ—Å—ã —Å—Ç—Ä–æ–∫
        $text = preg_replace('/\n{3,}/', "\n\n", $text);
        
        return trim($text);
    }

    /**
     * –†–∞–∑–±–∏–≤–∞–µ—Ç –¥–ª–∏–Ω–Ω—ã–π —Ç–µ–∫—Å—Ç –Ω–∞ —á–∞—Å—Ç–∏ –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏
     */
    public static function splitLongMessage(string $text, int $maxLength = 4000): array
    {
        if (mb_strlen($text) <= $maxLength) {
            return [$text];
        }

        $parts = [];
        $currentPart = '';
        $sentences = preg_split('/(?<=[.!?])\s+/', $text, -1, PREG_SPLIT_NO_EMPTY);

        foreach ($sentences as $sentence) {
            if (mb_strlen($currentPart . $sentence) <= $maxLength) {
                $currentPart .= ($currentPart ? ' ' : '') . $sentence;
            } else {
                if ($currentPart) {
                    $parts[] = trim($currentPart);
                    $currentPart = $sentence;
                } else {
                    // –ï—Å–ª–∏ –æ–¥–Ω–æ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ —Å–ª–∏—à–∫–æ–º –¥–ª–∏–Ω–Ω–æ–µ, —Ä–∞–∑–±–∏–≤–∞–µ–º –µ–≥–æ –ø—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ
                    $chunks = str_split($sentence, $maxLength);
                    foreach ($chunks as $chunk) {
                        $parts[] = $chunk;
                    }
                }
            }
        }

        if ($currentPart) {
            $parts[] = trim($currentPart);
        }

        return $parts;
    }
} 