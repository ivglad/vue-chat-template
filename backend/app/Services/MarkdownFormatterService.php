<?php

namespace App\Services;

class MarkdownFormatterService
{
    /**
     * –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ—Ç markdown –≤ HTML –¥–ª—è –≤–µ–±-–∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞
     */
    public static function convertMarkdownToHtml(string $text): string
    {
        // –≠–∫—Ä–∞–Ω–∏—Ä—É–µ–º HTML —Ç–µ–≥–∏ –¥–ª—è –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏
        $text = htmlspecialchars($text, ENT_QUOTES, 'UTF-8');
        
        // –ó–∞–≥–æ–ª–æ–≤–∫–∏
        $text = preg_replace('/^### (.+)$/m', '<h3 class="text-lg font-semibold mt-4 mb-2">$1</h3>', $text);
        $text = preg_replace('/^## (.+)$/m', '<h2 class="text-xl font-semibold mt-4 mb-2">$1</h2>', $text);
        $text = preg_replace('/^# (.+)$/m', '<h1 class="text-2xl font-bold mt-4 mb-2">$1</h1>', $text);
        
        // –ñ–∏—Ä–Ω—ã–π —Ç–µ–∫—Å—Ç
        $text = preg_replace('/\*\*(.*?)\*\*/', '<strong class="font-semibold">$1</strong>', $text);
        $text = preg_replace('/__(.*?)__/', '<strong class="font-semibold">$1</strong>', $text);
        
        // –ö—É—Ä—Å–∏–≤
        $text = preg_replace('/\*(.*?)\*/', '<em class="italic">$1</em>', $text);
        $text = preg_replace('/_(.*?)_/', '<em class="italic">$1</em>', $text);
        
        // –ö–æ–¥ (–∏–Ω–ª–∞–π–Ω)
        $text = preg_replace('/`([^`]+)`/', '<code class="bg-gray-100 dark:bg-gray-800 px-1 py-0.5 rounded text-sm font-mono">$1</code>', $text);
        
        // –ë–ª–æ–∫–∏ –∫–æ–¥–∞
        $text = preg_replace_callback('/```(\w+)?\n?([\s\S]*?)```/', function($matches) {
            $language = !empty($matches[1]) ? $matches[1] : '';
            $code = trim($matches[2]);
            $langLabel = $language ? '<span class="text-xs text-gray-500 dark:text-gray-400 mb-1 block">üíª ' . $language . '</span>' : '';
            return '<div class="mt-2 mb-2">' . $langLabel . '<pre class="bg-gray-100 dark:bg-gray-800 p-3 rounded-lg overflow-x-auto"><code class="text-sm font-mono">' . $code . '</code></pre></div>';
        }, $text);
        
        // –°—Å—ã–ª–∫–∏
        $text = preg_replace('/\[([^\]]+)\]\(([^\)]+)\)/', '<a href="$2" class="text-blue-600 dark:text-blue-400 hover:underline" target="_blank" rel="noopener">$1</a>', $text);
        
        // –ù–µ—É–ø–æ—Ä—è–¥–æ—á–µ–Ω–Ω—ã–µ —Å–ø–∏—Å–∫–∏
        $text = preg_replace('/^[\s]*[-\*\+]\s+(.+)$/m', '<li class="ml-4">‚Ä¢ $1</li>', $text);
        
        // –£–ø–æ—Ä—è–¥–æ—á–µ–Ω–Ω—ã–µ —Å–ø–∏—Å–∫–∏
        $text = preg_replace('/^[\s]*(\d+)\.\s+(.+)$/m', '<li class="ml-4">$1. $2</li>', $text);
        
        // –û–±–æ—Ä–∞—á–∏–≤–∞–µ–º —Å–ø–∏—Å–∫–∏ –≤ ul/ol —Ç–µ–≥–∏
        $text = preg_replace('/(<li[^>]*>.*?<\/li>(?:\s*<li[^>]*>.*?<\/li>)*)/s', '<ul class="space-y-1 mt-2 mb-2">$1</ul>', $text);
        
        // –¶–∏—Ç–∞—Ç—ã
        $text = preg_replace('/^>\s+(.+)$/m', '<blockquote class="border-l-4 border-gray-300 dark:border-gray-600 pl-4 italic text-gray-700 dark:text-gray-300 mt-2 mb-2">$1</blockquote>', $text);
        
        // –ì–æ—Ä–∏–∑–æ–Ω—Ç–∞–ª—å–Ω—ã–µ –ª–∏–Ω–∏–∏
        $text = preg_replace('/^[-\*_]{3,}$/m', '<hr class="border-gray-300 dark:border-gray-600 my-4">', $text);
        
        // –ü–µ—Ä–µ–Ω–æ—Å—ã —Å—Ç—Ä–æ–∫
        $text = preg_replace('/\n\n/', '</p><p class="mb-2">', $text);
        $text = preg_replace('/\n/', '<br>', $text);
        
        // –û–±–æ—Ä–∞—á–∏–≤–∞–µ–º –≤ –ø–∞—Ä–∞–≥—Ä–∞—Ñ—ã
        if (!empty(trim($text))) {
            $text = '<p class="mb-2">' . $text . '</p>';
        }
        
        // –£–±–∏—Ä–∞–µ–º –ø—É—Å—Ç—ã–µ –ø–∞—Ä–∞–≥—Ä–∞—Ñ—ã
        $text = preg_replace('/<p[^>]*><\/p>/', '', $text);
        
        return $text;
    }
    
    /**
     * –ü—Ä–æ–≤–µ—Ä—è–µ—Ç, —Å–æ–¥–µ—Ä–∂–∏—Ç –ª–∏ —Ç–µ–∫—Å—Ç markdown —Ä–∞–∑–º–µ—Ç–∫—É
     */
    public static function hasMarkdown(string $text): bool
    {
        $markdownPatterns = [
            '/^#{1,6}\s+/',           // –ó–∞–≥–æ–ª–æ–≤–∫–∏
            '/\*\*.*?\*\*/',          // –ñ–∏—Ä–Ω—ã–π —Ç–µ–∫—Å—Ç
            '/__.*?__/',              // –ñ–∏—Ä–Ω—ã–π —Ç–µ–∫—Å—Ç
            '/\*.*?\*/',              // –ö—É—Ä—Å–∏–≤
            '/_.*?_/',                // –ö—É—Ä—Å–∏–≤
            '/`.*?`/',                // –ö–æ–¥
            '/```[\s\S]*?```/',       // –ë–ª–æ–∫–∏ –∫–æ–¥–∞
            '/\[.*?\]\(.*?\)/',       // –°—Å—ã–ª–∫–∏
            '/^[\s]*[-\*\+]\s+/m',    // –°–ø–∏—Å–∫–∏
            '/^[\s]*\d+\.\s+/m',      // –ù—É–º–µ—Ä–æ–≤–∞–Ω–Ω—ã–µ —Å–ø–∏—Å–∫–∏
            '/^>\s+/m',               // –¶–∏—Ç–∞—Ç—ã
            '/^[-\*_]{3,}$/m',        // –ì–æ—Ä–∏–∑–æ–Ω—Ç–∞–ª—å–Ω—ã–µ –ª–∏–Ω–∏–∏
        ];
        
        foreach ($markdownPatterns as $pattern) {
            if (preg_match($pattern, $text)) {
                return true;
            }
        }
        
        return false;
    }
}