<x-filament-panels::page>
    <div class="space-y-6" wire:poll.5s="refreshChat">

        <!-- –ò—Å—Ç–æ—Ä–∏—è —á–∞—Ç–∞ -->
        <div class="fi-section rounded-xl bg-white shadow-sm ring-1 ring-gray-950/5 dark:bg-gray-900 dark:ring-white/10">
            <div class="p-6">
                @if(empty($chatHistory))
                    <div class="text-center py-8">
                        <div class="text-gray-400 text-lg mb-2">üí¨</div>
                        <p class="text-gray-500 dark:text-gray-400">
                            –í–∞—à–∞ –∏—Å—Ç–æ—Ä–∏—è —á–∞—Ç–∞ –ø—É—Å—Ç–∞. –ù–∞—á–Ω–∏—Ç–µ –¥–∏–∞–ª–æ–≥, –æ—Ç–ø—Ä–∞–≤–∏–≤ –ø–µ—Ä–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ!
                        </p>
                    </div>
                @else
                    <div class="space-y-4 max-h-96 overflow-y-auto" id="chat-history">
                        @foreach($chatHistory as $message)
                            <div class="flex {{ $message['type'] === 'user' ? 'justify-end' : 'justify-start' }}" 
                                 data-message-id="{{ $message['id'] }}"
                                 wire:key="message-{{ $message['id'] }}">
                                <div class="max-w-2xl lg:max-w-md px-4 py-2 rounded-lg {{ $message['type'] === 'user' ? 'bg-blue-500 text-white' : 'bg-gray-100 text-gray-900 dark:bg-gray-800 dark:text-gray-100' }}">
                                    
                                    <!-- –ò–Ω–¥–∏–∫–∞—Ç–æ—Ä —Å–≤—è–∑–∏ —Å–æ–æ–±—â–µ–Ω–∏–π -->
                                    @if($message['is_reply'])
                                        <div class="text-xs opacity-70 mb-1">
                                            ‚Ü≥ –û—Ç–≤–µ—Ç –Ω–∞ —Å–æ–æ–±—â–µ–Ω–∏–µ #{{ $message['parent_id'] }}
                                        </div>
                                    @elseif($message['type'] === 'user' && $message['replies_count'] > 0)
                                        <div class="text-xs opacity-70 mb-1">
                                            ‚óè –ï—Å—Ç—å {{ $message['replies_count'] }} –æ—Ç–≤–µ—Ç(–æ–≤)
                                        </div>
                                    @endif

                                    <!-- –û—Å–Ω–æ–≤–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ -->
                                    <div class="prose max-w-none dark:prose-invert break-words">
                                        @if($message['type'] === 'bot')
                                            {!! \App\Services\MarkdownFormatterService::convertMarkdownToHtml($message['message']) !!}
                                        @else
                                            <div class="whitespace-pre-wrap">{{ $message['message'] }}</div>
                                        @endif
                                    </div>
                                    
                                    <!-- –ò—Å—Ç–æ—á–Ω–∏–∫–∏ –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤ -->
                                    @if($message['context_documents'] && count($message['context_documents']) > 0)
                                        <div class="text-xs opacity-70 mt-2 border-t border-white/20 pt-2">
                                            üìö –ò—Å—Ç–æ—á–Ω–∏–∫–∏: {{ implode(', ', $message['context_documents']) }}
                                        </div>
                                    @endif
                                    
                                    <!-- –í—Ä–µ–º—è –∏ –∞–≤—Ç–æ—Ä -->
                                    <div class="text-xs opacity-70 mt-2">
                                        @if($message['type'] === 'user')
                                            –í—ã
                                        @else
                                            ü§ñ –ò–ò-–ø–æ–º–æ—â–Ω–∏–∫
                                        @endif
                                        ¬∑ {{ $message['created_at_human'] }}
                                    </div>
                                </div>
                            </div>
                        @endforeach
                        
                        <!-- –ò–Ω–¥–∏–∫–∞—Ç–æ—Ä –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è -->
                        @if($isProcessing)
                            <div class="flex justify-start" id="processing-indicator">
                                <div class="max-w-xs lg:max-w-md px-4 py-2 rounded-lg bg-gray-100 text-gray-900 dark:bg-gray-800 dark:text-gray-100">
                                    <div class="flex items-center space-x-2">
                                        <svg class="animate-pulse h-4 w-4 text-gray-400" fill="currentColor" viewBox="0 0 20 20">
                                            <circle cx="4" cy="10" r="2"/>
                                            <circle cx="10" cy="10" r="2"/>
                                            <circle cx="16" cy="10" r="2"/>
                                        </svg>
                                        <span class="text-sm text-gray-500">–ò–ò-–ø–æ–º–æ—â–Ω–∏–∫ –ø–µ—á–∞—Ç–∞–µ—Ç...</span>
                                    </div>
                                </div>
                            </div>
                        @endif
                    </div>
                @endif
            </div>

            <!-- –§–æ—Ä–º–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è -->
            <div class="fi-section rounded-xl bg-white p-6 shadow-sm ring-1 ring-gray-950/5 dark:bg-gray-900 dark:ring-white/10">
                <form wire:submit="sendMessage">
                    {{ $this->form }}
                    
                    <!-- –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –≤—ã–±—Ä–∞–Ω–Ω–æ–º –∫–æ–Ω—Ç–µ–∫—Å—Ç–µ -->
                    @if(!empty($data['selected_documents']))
                        <!-- <div class="mt-6 p-3 bg-blue-50 dark:bg-blue-900/20 border border-blue-200 dark:border-blue-700 rounded-md">
                            <div class="flex items-start">
                                <div class="flex-shrink-0">
                                    <svg class="h-5 w-5 text-blue-400" fill="currentColor" viewBox="0 0 20 20">
                                        <path fill-rule="evenodd" d="M18 10a8 8 0 11-16 0 8 8 0 0116 0zm-7-4a1 1 0 11-2 0 1 1 0 012 0zM9 9a1 1 0 000 2v3a1 1 0 001 1h1a1 1 0 100-2v-3a1 1 0 00-1-1H9z" clip-rule="evenodd"></path>
                                    </svg>
                                </div>
                                <div class="ml-3">
                                    <p class="text-sm text-blue-700 dark:text-blue-300">
                                        <strong>–ê–∫—Ç–∏–≤–Ω—ã–π –∫–æ–Ω—Ç–µ–∫—Å—Ç</strong>
                                    </p>
                                </div>
                            </div>
                        </div> -->
                    @else
                        <!-- <div class="mt-6 p-3 bg-gray-50 dark:bg-gray-800/50 border border-gray-200 dark:border-gray-700 rounded-md">
                            <div class="flex items-start">
                                <div class="flex-shrink-0">
                                    <svg class="h-5 w-5 text-gray-400" fill="currentColor" viewBox="0 0 20 20">
                                        <path fill-rule="evenodd" d="M18 10a8 8 0 11-16 0 8 8 0 0116 0zm-7-4a1 1 0 11-2 0 1 1 0 012 0zM9 9a1 1 0 000 2v3a1 1 0 001 1h1a1 1 0 100-2v-3a1 1 0 00-1-1H9z" clip-rule="evenodd"></path>
                                    </svg>
                                </div>
                                <div class="ml-3">
                                    <p class="text-sm text-gray-600 dark:text-gray-400">
                                        <strong>–£–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω—ã–π —Ä–µ–∂–∏–º</strong>
                                    </p>
                                </div>
                            </div>
                        </div> -->
                    @endif
                    
                    <!-- –ò–Ω–¥–∏–∫–∞—Ç–æ—Ä –æ–±—Ä–∞–±–æ—Ç–∫–∏ -->
                    @if($isProcessing)
                        <div class="mt-4 p-3 bg-yellow-50 dark:bg-yellow-900/20 border border-yellow-200 dark:border-yellow-700 rounded-md">
                            <div class="flex items-center">
                                <div class="flex-shrink-0">
                                    <svg class="animate-spin h-5 w-5 text-yellow-400" fill="none" viewBox="0 0 24 24">
                                        <circle class="opacity-25" cx="12" cy="12" r="10" stroke="currentColor" stroke-width="4"></circle>
                                        <path class="opacity-75" fill="currentColor" d="M4 12a8 8 0 018-8V0C5.373 0 0 5.373 0 12h4zm2 5.291A7.962 7.962 0 014 12H0c0 3.042 1.135 5.824 3 7.938l3-2.647z"></path>
                                    </svg>
                                </div>
                                <div class="ml-3">
                                    <p class="text-sm text-yellow-700 dark:text-yellow-300">
                                        <strong>–û–±—Ä–∞–±–∞—Ç—ã–≤–∞—é –≤–∞—à –∑–∞–ø—Ä–æ—Å...</strong> –≠—Ç–æ –º–æ–∂–µ—Ç –∑–∞–Ω—è—Ç—å –Ω–µ—Å–∫–æ–ª—å–∫–æ —Å–µ–∫—É–Ω–¥.
                                    </p>
                                </div>
                            </div>
                        </div>
                    @endif
                    
                    <div class="mt-6 flex justify-between">
                        <div>
                            {{ $this->getClearAction() }}
                        </div>
                        <div>
                            {{ $this->getSendAction() }}
                        </div>
                    </div>
                </form>
            </div>
        </div>
    </div>

    <script>
        let lastScrollHeight = 0;
        
        // –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∞—è –ø—Ä–æ–∫—Ä—É—Ç–∫–∞ –∫ –ø–æ—Å–ª–µ–¥–Ω–µ–º—É —Å–æ–æ–±—â–µ–Ω–∏—é
        function scrollToBottom() {
            const chatHistory = document.getElementById('chat-history');
            if (chatHistory) {
                // –ü—Ä–æ–∫—Ä—É—á–∏–≤–∞–µ–º —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ –µ—Å—Ç—å –Ω–æ–≤—ã–π –∫–æ–Ω—Ç–µ–Ω—Ç
                if (chatHistory.scrollHeight > lastScrollHeight) {
                    chatHistory.scrollTop = chatHistory.scrollHeight;
                    lastScrollHeight = chatHistory.scrollHeight;
                }
            }
        }
        
        // –ü—Ä–æ–∫—Ä—É—Ç–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ —Å—Ç—Ä–∞–Ω–∏—Ü—ã
        document.addEventListener('DOMContentLoaded', function() {
            scrollToBottom();
        });
        
        // –ü—Ä–æ–∫—Ä—É—Ç–∫–∞ –ø–æ—Å–ª–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è Livewire
        document.addEventListener('livewire:navigated', scrollToBottom);
        
        // –°–ª—É—à–∞–µ–º —Å–æ–±—ã—Ç–∏—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏–π
        window.addEventListener('message-processing', function() {
            // –ü—Ä–æ–∫—Ä—É—á–∏–≤–∞–µ–º –∫ –Ω–∏–∑—É –∫–æ–≥–¥–∞ –Ω–∞—á–∏–Ω–∞–µ—Ç—Å—è –æ–±—Ä–∞–±–æ—Ç–∫–∞
            setTimeout(scrollToBottom, 100);
        });
        
        window.addEventListener('message-processed', function() {
            // –ü—Ä–æ–∫—Ä—É—á–∏–≤–∞–µ–º –∫ –Ω–∏–∑—É –∫–æ–≥–¥–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞
            setTimeout(scrollToBottom, 100);
        });
        
        // –û—Ç–ø—Ä–∞–≤–∫–∞ —Ñ–æ—Ä–º—ã –ø–æ Ctrl+Enter
        document.addEventListener('keydown', function(e) {
            if ((e.ctrlKey || e.metaKey) && e.key === 'Enter') {
                const form = document.querySelector('form[wire\\:submit="sendMessage"]');
                if (form) {
                    const event = new Event('submit', {
                        bubbles: true,
                        cancelable: true
                    });
                    form.dispatchEvent(event);
                }
            }
        });

        // –û–±–Ω–æ–≤–ª—è–µ–º –ø—Ä–æ–∫—Ä—É—Ç–∫—É –ø—Ä–∏ –∏–∑–º–µ–Ω–µ–Ω–∏–∏ —Å–æ–¥–µ—Ä–∂–∏–º–æ–≥–æ —á–∞—Ç–∞
        const observer = new MutationObserver(function(mutations) {
            mutations.forEach(function(mutation) {
                if (mutation.type === 'childList' && mutation.target.id === 'chat-history') {
                    setTimeout(scrollToBottom, 50);
                }
            });
        });

        // –ó–∞–ø—É—Å–∫–∞–µ–º –Ω–∞–±–ª—é–¥–∞—Ç–µ–ª—å –ø–æ—Å–ª–µ –∑–∞–≥—Ä—É–∑–∫–∏ DOM
        document.addEventListener('DOMContentLoaded', function() {
            const chatHistory = document.getElementById('chat-history');
            if (chatHistory) {
                observer.observe(chatHistory, { childList: true, subtree: true });
            }
        });
    </script>
</x-filament-panels::page> 