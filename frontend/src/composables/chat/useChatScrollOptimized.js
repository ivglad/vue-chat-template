import {
  computed,
  nextTick,
  watchEffect,
  onUnmounted,
  ref,
  readonly,
} from 'vue'
import {
  useElementVisibility,
  useScroll,
  useResizeObserver,
  watchArray,
  watchDeep,
  useDebounceFn,
  useWindowSize,
} from '@vueuse/core'

/**
 * –û–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –∫–æ–º–ø–æ–∑–∞–±–ª –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –ø—Ä–æ–∫—Ä—É—Ç–∫–æ–π —á–∞—Ç–∞
 * –ò—Å–ø–æ–ª—å–∑—É–µ—Ç VueUse –¥–ª—è —Ä–µ–∞–∫—Ç–∏–≤–Ω–æ–≥–æ –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è —Å–æ—Å—Ç–æ—è–Ω–∏—è –±–µ–∑ —Ç–∞–π–º–∞—É—Ç–æ–≤
 *
 * @param {Ref<HTMLElement>} scrollContainer - ref –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–∞ –¥–ª—è —Å–∫—Ä–æ–ª–ª–∞
 * @param {Object} options - –æ–ø—Ü–∏–∏ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏
 * @returns {Object} API –∫–æ–º–ø–æ–∑–∞–±–ª–∞ —Å –º–µ—Ç–æ–¥–∞–º–∏ –ø—Ä–æ–∫—Ä—É—Ç–∫–∏
 */
export function useChatScrollOptimized(scrollContainer, options = {}) {
  const { behavior = 'smooth', threshold = 0.1, rootMargin = '0px' } = options

  if (!scrollContainer) {
    console.warn('useChatScrollOptimized: scrollContainer ref is required')
    return {
      scrollToBottom: () => {},
      isScrolledToBottom: computed(() => false),
      canScrollToBottom: computed(() => false),
    }
  }

  // –ò—Å–ø–æ–ª—å–∑—É–µ–º VueUse –¥–ª—è –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è –ø—Ä–æ–∫—Ä—É—Ç–∫–∏
  const {
    y: scrollY,
    arrivedState,
    isScrolling,
    directions,
  } = useScroll(scrollContainer, { behavior })

  // –û—Ç—Å–ª–µ–∂–∏–≤–∞–µ–º –≤–∏–¥–∏–º–æ—Å—Ç—å –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–∞
  const containerVisible = useElementVisibility(scrollContainer, {
    threshold,
    rootMargin,
  })

  // –§–ª–∞–≥ –¥–ª—è –±–ª–æ–∫–∏—Ä–æ–≤–∫–∏ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–π –ø—Ä–æ–∫—Ä—É—Ç–∫–∏ –≤–æ –≤—Ä–µ–º—è —É–º–Ω–æ–π –ø—Ä–æ–∫—Ä—É—Ç–∫–∏
  const isSmartScrollActive = ref(false)

  // –û—Ç—Å–ª–µ–∂–∏–≤–∞–µ–º –∏–∑–º–µ–Ω–µ–Ω–∏—è —Ä–∞–∑–º–µ—Ä–∞ –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–∞
  useResizeObserver(scrollContainer, () => {
    // –ë–ª–æ–∫–∏—Ä—É–µ–º –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫—É—é –ø—Ä–æ–∫—Ä—É—Ç–∫—É –≤–æ –≤—Ä–µ–º—è —É–º–Ω–æ–π –ø—Ä–æ–∫—Ä—É—Ç–∫–∏
    if (isSmartScrollActive.value) {
      console.log('üö´ ResizeObserver (composable): Blocked by smart scroll flag')
      return
    }
    
    // –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –ø—Ä–æ–∫—Ä—É—á–∏–≤–∞–µ–º –≤–Ω–∏–∑ –ø—Ä–∏ –∏–∑–º–µ–Ω–µ–Ω–∏–∏ —Ä–∞–∑–º–µ—Ä–∞, –µ—Å–ª–∏ —É–∂–µ –±—ã–ª–∏ –≤–Ω–∏–∑—É
    if (arrivedState.bottom) {
      console.log('üìè ResizeObserver (composable): Scrolling to bottom')
      nextTick(() => scrollToBottom())
    }
  })

  // –í—ã—á–∏—Å–ª—è–µ–º, –Ω–∞—Ö–æ–¥–∏–º—Å—è –ª–∏ –º—ã –≤–Ω–∏–∑—É
  const isScrolledToBottom = computed(() => arrivedState.bottom)

  // –í—ã—á–∏—Å–ª—è–µ–º, –º–æ–∂–µ–º –ª–∏ –º—ã –ø—Ä–æ–∫—Ä—É—Ç–∏—Ç—å –≤–Ω–∏–∑
  const canScrollToBottom = computed(() => {
    if (!scrollContainer.value) return false
    const { scrollHeight, clientHeight } = scrollContainer.value
    return scrollHeight > clientHeight
  })

  // –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–ª–∞–≤–Ω–æ–π –ø—Ä–æ–∫—Ä—É—Ç–∫–∏ –≤–Ω–∏–∑
  const scrollToBottom = () => {
    if (!scrollContainer.value || !containerVisible.value) return

    const element = scrollContainer.value
    const targetScrollTop = element.scrollHeight - element.clientHeight

    if (behavior === 'smooth') {
      element.scrollTo({
        top: targetScrollTop,
        behavior: 'smooth',
      })
    } else {
      element.scrollTop = targetScrollTop
    }
  }

  // –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø—Ä–æ–∫—Ä—É—Ç–∫–∏ –∫ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–Ω–æ–º—É —ç–ª–µ–º–µ–Ω—Ç—É
  const scrollToElement = (elementOrSelector, options = {}) => {
    if (!scrollContainer.value || !containerVisible.value) return

    let targetElement
    if (typeof elementOrSelector === 'string') {
      targetElement = scrollContainer.value.querySelector(elementOrSelector)
    } else {
      targetElement = elementOrSelector
    }

    if (!targetElement) return

    const {
      block = 'start',
      inline = 'nearest',
      behavior: scrollBehavior = behavior,
    } = options

    targetElement.scrollIntoView({
      behavior: scrollBehavior,
      block,
      inline,
    })
  }

  // –û—Ç—Å–ª–µ–∂–∏–≤–∞–µ–º —Ä–∞–∑–º–µ—Ä—ã –æ–∫–Ω–∞ –¥–ª—è –∞–¥–∞–ø—Ç–∏–≤–Ω–æ—Å—Ç–∏
  const { width: windowWidth } = useWindowSize()

  // –ö—ç—à –¥–ª—è —ç–ª–µ–º–µ–Ω—Ç–æ–≤ DOM –¥–ª—è –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–∏ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏
  const elementCache = new Map()

  /**
   * –û–ø—Ä–µ–¥–µ–ª–∏—Ç—å, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ —É—Å—Ç—Ä–æ–π—Å—Ç–≤–æ –º–æ–±–∏–ª—å–Ω—ã–º
   */
  const isMobileDevice = () => {
    return windowWidth.value < 768 // Tailwind md breakpoint
  }

  /**
   * –ù–∞–π—Ç–∏ —ç–ª–µ–º–µ–Ω—Ç assistant-title –ø–æ ID —Å–æ–æ–±—â–µ–Ω–∏—è —Å –∫—ç—à–∏—Ä–æ–≤–∞–Ω–∏–µ–º
   * assistant-title - —ç—Ç–æ —Ä–∞–∑–¥–µ–ª–∏—Ç–µ–ª—å –º–µ–∂–¥—É –ª–æ–∫–∞–ª—å–Ω—ã–º —Å–æ–æ–±—â–µ–Ω–∏–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏ –æ—Ç–≤–µ—Ç–æ–º —Å–µ—Ä–≤–µ—Ä–∞
   */
  const findAssistantTitle = (messageId) => {
    if (!messageId) return null

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫—ç—à
    if (elementCache.has(messageId)) {
      const cachedElement = elementCache.get(messageId)
      // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —ç–ª–µ–º–µ–Ω—Ç –≤—Å–µ –µ—â–µ –≤ DOM
      if (document.contains(cachedElement)) {
        return cachedElement
      } else {
        // –£–¥–∞–ª—è–µ–º –∏–∑ –∫—ç—à–∞, –µ—Å–ª–∏ —ç–ª–µ–º–µ–Ω—Ç –±–æ–ª—å—à–µ –Ω–µ –≤ DOM
        elementCache.delete(messageId)
      }
    }

    // –°—Ç—Ä–∞—Ç–µ–≥–∏—è 1: –ò—â–µ–º –≤–Ω—É—Ç—Ä–∏ —ç–ª–µ–º–µ–Ω—Ç–∞ —Å data-message-id (–æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω—ã–π –ø–æ–¥—Ö–æ–¥)
    let element = scrollContainer.value?.querySelector(`[data-message-id="${messageId}"] .assistant-title`)
    
    if (!element) {
      // –°—Ç—Ä–∞—Ç–µ–≥–∏—è 2: –ò—â–µ–º –±–ª–∏–∂–∞–π—à–∏–π assistant-title –∫ —ç–ª–µ–º–µ–Ω—Ç—É —Å data-message-id
      const messageElement = scrollContainer.value?.querySelector(`[data-message-id="${messageId}"]`)
      if (messageElement) {
        // –ò—â–µ–º assistant-title –¥–æ –∏–ª–∏ –ø–æ—Å–ª–µ —ç–ª–µ–º–µ–Ω—Ç–∞ —Å–æ–æ–±—â–µ–Ω–∏—è
        element = messageElement.previousElementSibling?.classList.contains('assistant-title') 
          ? messageElement.previousElementSibling
          : messageElement.nextElementSibling?.classList.contains('assistant-title')
          ? messageElement.nextElementSibling
          : null
      }
    }
    
    if (!element) {
      // –°—Ç—Ä–∞—Ç–µ–≥–∏—è 3: –ò—â–µ–º –ø–æ –∏–Ω–¥–µ–∫—Å—É (–ø–æ—Å–ª–µ–¥–Ω–∏–π assistant-title –¥–ª—è –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è)
      const allAssistantTitles = Array.from(scrollContainer.value?.querySelectorAll('.assistant-title') || [])
      const allMessageElements = Array.from(scrollContainer.value?.querySelectorAll('[data-message-id]') || [])
      
      // –ù–∞—Ö–æ–¥–∏–º –∏–Ω–¥–µ–∫—Å —Ç–µ–∫—É—â–µ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è
      const messageIndex = allMessageElements.findIndex(el => el.getAttribute('data-message-id') === messageId)
      
      if (messageIndex >= 0 && allAssistantTitles[messageIndex]) {
        element = allAssistantTitles[messageIndex]
      }
    }

    console.log('element', element)

    // –ö—ç—à–∏—Ä—É–µ–º –Ω–∞–π–¥–µ–Ω–Ω—ã–π —ç–ª–µ–º–µ–Ω—Ç
    if (element) {
      elementCache.set(messageId, element)
    }

    return element
  }

  /**
   * –†–∞—Å—Å—á–∏—Ç–∞—Ç—å –ø–æ–∑–∏—Ü–∏—é –¥–ª—è –ø—Ä–æ–∫—Ä—É—Ç–∫–∏ —ç–ª–µ–º–µ–Ω—Ç–∞ –∫ –Ω–∏–∂–Ω–µ–π –≥—Ä–∞–Ω–∏—Ü–µ —ç–∫—Ä–∞–Ω–∞
   */
  const calculateScrollToBottom = (element) => {
    if (!element || !scrollContainer.value) return 0

    const containerRect = scrollContainer.value.getBoundingClientRect()
    const elementRect = element.getBoundingClientRect()

    // –£—á–∏—Ç—ã–≤–∞–µ–º –æ—Å–æ–±–µ–Ω–Ω–æ—Å—Ç–∏ –º–æ–±–∏–ª—å–Ω—ã—Ö —É—Å—Ç—Ä–æ–π—Å—Ç–≤
    const offset = isMobileDevice() ? 20 : 0

    // –ü–æ–∑–∏—Ü–∏—è –¥–ª—è —Ä–∞–∑–º–µ—â–µ–Ω–∏—è —ç–ª–µ–º–µ–Ω—Ç–∞ —É –Ω–∏–∂–Ω–µ–π –≥—Ä–∞–Ω–∏—Ü—ã —ç–∫—Ä–∞–Ω–∞
    return (
      elementRect.top +
      scrollContainer.value.scrollTop -
      (containerRect.bottom - elementRect.height - offset)
    )
  }

  /**
   * –†–∞—Å—Å—á–∏—Ç–∞—Ç—å –ø–æ–∑–∏—Ü–∏—é –¥–ª—è –ø—Ä–æ–∫—Ä—É—Ç–∫–∏ —ç–ª–µ–º–µ–Ω—Ç–∞ –∫ –≤–µ—Ä—Ö–Ω–µ–π –≥—Ä–∞–Ω–∏—Ü–µ —ç–∫—Ä–∞–Ω–∞
   */
  const calculateScrollToTop = (element) => {
    if (!element || !scrollContainer.value) return 0

    const containerRect = scrollContainer.value.getBoundingClientRect()
    const elementRect = element.getBoundingClientRect()

    // –£—á–∏—Ç—ã–≤–∞–µ–º –æ—Å–æ–±–µ–Ω–Ω–æ—Å—Ç–∏ –º–æ–±–∏–ª—å–Ω—ã—Ö —É—Å—Ç—Ä–æ–π—Å—Ç–≤
    const offset = isMobileDevice() ? 10 : 0

    // –ü–æ–∑–∏—Ü–∏—è –¥–ª—è —Ä–∞–∑–º–µ—â–µ–Ω–∏—è —ç–ª–µ–º–µ–Ω—Ç–∞ —É –≤–µ—Ä—Ö–Ω–µ–π –≥—Ä–∞–Ω–∏—Ü—ã —ç–∫—Ä–∞–Ω–∞
    return (
      elementRect.top +
      scrollContainer.value.scrollTop -
      containerRect.top -
      offset
    )
  }

  /**
   * –í—ã–ø–æ–ª–Ω–∏—Ç—å –ø–ª–∞–≤–Ω—É—é –ø—Ä–æ–∫—Ä—É—Ç–∫—É –∫ —É–∫–∞–∑–∞–Ω–Ω–æ–π –ø–æ–∑–∏—Ü–∏–∏
   */
  const performScroll = (targetY) => {
    // –ù–µ –ø—Ä–æ–∫—Ä—É—á–∏–≤–∞–µ–º, –µ—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∞–∫—Ç–∏–≤–Ω–æ —Å–∫—Ä–æ–ª–ª–∏—Ç
    if (isScrolling.value) return

    // –ù–µ –ø—Ä–æ–∫—Ä—É—á–∏–≤–∞–µ–º, –µ—Å–ª–∏ –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω
    if (!scrollContainer.value || !containerVisible.value) return

    const element = scrollContainer.value

    if (behavior === 'smooth') {
      element.scrollTo({
        top: targetY,
        behavior: 'smooth',
      })
    } else {
      element.scrollTop = targetY
    }
  }

  /**
   * –ü—Ä–æ–∫—Ä—É—Ç–∏—Ç—å assistant-title –∫ –Ω–∏–∂–Ω–µ–π –≥—Ä–∞–Ω–∏—Ü–µ —ç–∫—Ä–∞–Ω–∞
   */
  const scrollAssistantTitleToBottom = (messageId) => {
    nextTick(() => {
      const titleElement = findAssistantTitle(messageId)
      if (!titleElement) return

      const targetY = calculateScrollToBottom(titleElement)
      performScroll(targetY)
    })
  }

  /**
   * –ü—Ä–æ–∫—Ä—É—Ç–∏—Ç—å assistant-title –∫ –≤–µ—Ä—Ö–Ω–µ–π –≥—Ä–∞–Ω–∏—Ü–µ —ç–∫—Ä–∞–Ω–∞
   */
  const scrollAssistantTitleToTop = (messageId) => {
    console.log('üîç Searching for assistant-title with messageId:', messageId)
    
    nextTick(() => {
      const titleElement = findAssistantTitle(messageId)
      
      if (!titleElement) {
        console.error('‚ùå Assistant-title NOT FOUND for messageId:', messageId)
        console.log('üì¶ scrollContainer.value:', scrollContainer.value)

        // –ü–æ–¥—Ä–æ–±–Ω–∞—è –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∞
        const allElementsInContainer = Array.from(
          scrollContainer.value?.querySelectorAll('[data-message-id]') || [],
        )
        console.log(
          'üîç Available elements with data-message-id (in container):',
          allElementsInContainer.length,
        )

        const allElementsInDocument = Array.from(
          document.querySelectorAll('[data-message-id]'),
        )
        console.log(
          'üîç Available elements with data-message-id (in document):',
          allElementsInDocument.length,
        )

        const allAssistantTitles = Array.from(
          scrollContainer.value?.querySelectorAll('.assistant-title') || [],
        )
        console.log(
          'üéØ All assistant-title elements found:',
          allAssistantTitles.length,
        )

        return
      }

      console.log('‚úÖ Assistant-title FOUND:', titleElement)
      
      const targetY = calculateScrollToTop(titleElement)
      console.log('üìê Calculated scroll position:', targetY)
      
      performScroll(targetY)
      console.log('üéØ Scroll executed to position:', targetY)
    })
  }

  /**
   * –ù–∞–π—Ç–∏ –Ω–æ–≤–æ–µ –ª–æ–∫–∞–ª—å–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
   */
  const findNewLocalUserMessage = (newMessages, oldMessages) => {
    if (!newMessages || !oldMessages) return null

    // –ò—â–µ–º –Ω–æ–≤—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —Å isLocal: true
    const newUserMessages = newMessages.filter(
      (msg) =>
        msg.type === 'user' &&
        msg.isLocal === true &&
        !oldMessages.find((oldMsg) => oldMsg.id === msg.id),
    )

    // –í–æ–∑–≤—Ä–∞—â–∞–µ–º –ø–æ—Å–ª–µ–¥–Ω–µ–µ –¥–æ–±–∞–≤–ª–µ–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
    return newUserMessages.length > 0
      ? newUserMessages[newUserMessages.length - 1]
      : null
  }

  /**
   * –ù–∞–π—Ç–∏ —Å–æ–æ–±—â–µ–Ω–∏–µ –±–æ—Ç–∞, –∫–æ—Ç–æ—Ä–æ–µ –∏–∑–º–µ–Ω–∏–ª–æ —Å—Ç–∞—Ç—É—Å –Ω–∞ 'replied'
   */
  const findNewlyRepliedMessage = (newMessages, oldMessages) => {
    if (!newMessages || !oldMessages) return null

    // –ò—â–µ–º —Å–æ–æ–±—â–µ–Ω–∏—è –±–æ—Ç–∞, –∫–æ—Ç–æ—Ä—ã–µ –∏–∑–º–µ–Ω–∏–ª–∏ —Å—Ç–∞—Ç—É—Å —Å 'loading' –Ω–∞ 'replied'
    for (const newMsg of newMessages) {
      if (newMsg.type === 'bot' && newMsg.status === 'replied') {
        const oldMsg = oldMessages.find((old) => old.id === newMsg.id)

        // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —Å—Ç–∞—Ç—É—Å –¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω–æ –∏–∑–º–µ–Ω–∏–ª—Å—è
        if (oldMsg && oldMsg.status === 'loading') {
          return newMsg
        }

        // –¢–∞–∫–∂–µ –ø—Ä–æ–≤–µ—Ä—è–µ–º –Ω–æ–≤—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è —Å isNew —Ñ–ª–∞–≥–æ–º
        if (newMsg.isNew === true) {
          return newMsg
        }
      }
    }

    return null
  }

  /**
   * –£–º–Ω–∞—è –ø—Ä–æ–∫—Ä—É—Ç–∫–∞ –ø—Ä–∏ –∏–∑–º–µ–Ω–µ–Ω–∏—è—Ö –≤ —Å–æ–æ–±—â–µ–Ω–∏—è—Ö
   */
  const enableSmartScroll = (messagesRef) => {
    if (!messagesRef) return

    // –î–µ–±–∞—É–Ω—Å–∏–Ω–≥ –¥–ª—è –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–∏ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏
    const debouncedFirstScroll = useDebounceFn((newMessages, oldMessages) => {
      const newUserMessage = findNewLocalUserMessage(newMessages, oldMessages)
      if (newUserMessage) {
        scrollAssistantTitleToBottom(newUserMessage.id)
      }
    }, 50)

    // –§—É–Ω–∫—Ü–∏—è –¥–ª—è –º–≥–Ω–æ–≤–µ–Ω–Ω–æ–π –∞–∫—Ç–∏–≤–∞—Ü–∏–∏ –±–ª–æ–∫–∏—Ä–æ–≤–∫–∏ (–±–µ–∑ –¥–µ–±–∞—É–Ω—Å–∏–Ω–≥–∞)
    const activateSmartScrollBlocking = (newMessages, oldMessages) => {
      const repliedMessage = findNewlyRepliedMessage(newMessages, oldMessages)

      if (repliedMessage) {
        console.log('üéØ Smart scroll: INSTANT blocking for message', repliedMessage.id)
        
        // –ú–ì–ù–û–í–ï–ù–ù–û –∞–∫—Ç–∏–≤–∏—Ä—É–µ–º —Ñ–ª–∞–≥ –±–ª–æ–∫–∏—Ä–æ–≤–∫–∏
        isSmartScrollActive.value = true
        console.log('üö´ Smart scroll: Blocking automatic scroll (INSTANT)')
      }
    }

    // –î–µ–±–∞—É–Ω—Å–∏—Ä–æ–≤–∞–Ω–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è —Å–∞–º–æ–π –ø—Ä–æ–∫—Ä—É—Ç–∫–∏
    const debouncedSecondScroll = useDebounceFn((newMessages, oldMessages) => {
      const repliedMessage = findNewlyRepliedMessage(newMessages, oldMessages)

      if (repliedMessage) {
        console.log('üéØ Smart scroll: Executing scroll for bot message', repliedMessage.id)
        
        // –ù–∞—Ö–æ–¥–∏–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ, –∫–æ—Ç–æ—Ä–æ–µ –ø—Ä–µ–¥—à–µ—Å—Ç–≤—É–µ—Ç –æ—Ç–≤–µ—Ç—É –±–æ—Ç–∞
        // assistant-title –Ω–∞—Ö–æ–¥–∏—Ç—Å—è –ú–ï–ñ–î–£ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∏–º —Å–æ–æ–±—â–µ–Ω–∏–µ–º –∏ –æ—Ç–≤–µ—Ç–æ–º –±–æ—Ç–∞
        const userMessage = newMessages
          .filter(msg => msg.type === 'user')
          .sort((a, b) => new Date(b.created_at) - new Date(a.created_at))[0] // –ü–æ—Å–ª–µ–¥–Ω–µ–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
        
        if (userMessage) {
          // –ñ–¥–µ–º —Å–ª–µ–¥—É—é—â–µ–≥–æ —Ç–∏–∫–∞, —á—Ç–æ–±—ã DOM —É—Å–ø–µ–ª –æ–±–Ω–æ–≤–∏—Ç—å—Å—è
          nextTick(() => {
            console.log('üîç Found corresponding user message:', userMessage.id)
            scrollAssistantTitleToTop(userMessage.id)
          })
        } else {
          console.error('‚ùå No user message found for bot reply:', repliedMessage.id)
        }
        
        // –°–±—Ä–∞—Å—ã–≤–∞–µ–º —Ñ–ª–∞–≥ —á–µ—Ä–µ–∑ –≤—Ä–µ–º—è –∞–Ω–∏–º–∞—Ü–∏–∏ + –±—É—Ñ–µ—Ä
        setTimeout(() => {
          isSmartScrollActive.value = false
          console.log('‚úÖ Smart scroll: Unblocking automatic scroll')
        }, 1000) // 600ms –∞–Ω–∏–º–∞—Ü–∏—è + 400ms –±—É—Ñ–µ—Ä
      }
    }, 50)

    // –û—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏–µ –∏–∑–º–µ–Ω–µ–Ω–∏–π –≤ —Å–æ–æ–±—â–µ–Ω–∏—è—Ö –¥–ª—è –¥–∏–Ω–∞–º–∏—á–µ—Å–∫–∏—Ö –ø—Ä–æ–∫—Ä—É—Ç–æ–∫
    watchArray(
      messagesRef,
      (newMessages, oldMessages, added, removed) => {
        // –ü–µ—Ä–≤–æ–Ω–∞—á–∞–ª—å–Ω–∞—è –∑–∞–≥—Ä—É–∑–∫–∞ - –ø—Ä–æ–∫—Ä—É—á–∏–≤–∞–µ–º –∫ –Ω–∏–∑—É
        if (oldMessages.length === 0 && newMessages.length > 0) {
          nextTick(() => scrollToBottom())
          return
        }

        // –û–±—ã—á–Ω–∞—è –ª–æ–≥–∏–∫–∞ –¥–ª—è –Ω–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π
        debouncedFirstScroll(newMessages, oldMessages)
      },
      { flush: 'post' },
    )

    // –û—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏–µ –∏–∑–º–µ–Ω–µ–Ω–∏–π –≤ —Å–æ–æ–±—â–µ–Ω–∏—è—Ö –¥–ª—è –≤—Ç–æ—Ä–æ–π –ø—Ä–æ–∫—Ä—É—Ç–∫–∏ (–æ—Ç–≤–µ—Ç—ã —Å–µ—Ä–≤–µ—Ä–∞)
    watchDeep(
      messagesRef,
      (newMessages, oldMessages) => {
        // –ú–ì–ù–û–í–ï–ù–ù–û –∞–∫—Ç–∏–≤–∏—Ä—É–µ–º –±–ª–æ–∫–∏—Ä–æ–≤–∫—É (–±–µ–∑ –¥–µ–±–∞—É–Ω—Å–∏–Ω–≥–∞)
        activateSmartScrollBlocking(newMessages, oldMessages)
        // –ó–∞—Ç–µ–º –≤—ã–ø–æ–ª–Ω—è–µ–º –¥–µ–±–∞—É–Ω—Å–∏—Ä–æ–≤–∞–Ω–Ω—É—é –ø—Ä–æ–∫—Ä—É—Ç–∫—É
        debouncedSecondScroll(newMessages, oldMessages)
      },
      { flush: 'post' },
    )
  }

  // –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∞—è –ø—Ä–æ–∫—Ä—É—Ç–∫–∞ –ø—Ä–∏ –ø–æ—è–≤–ª–µ–Ω–∏–∏ –Ω–æ–≤–æ–≥–æ –∫–æ–Ω—Ç–µ–Ω—Ç–∞
  const enableAutoScroll = (enable = true) => {
    if (!enable) return

    watchEffect(() => {
      // –ë–ª–æ–∫–∏—Ä—É–µ–º –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫—É—é –ø—Ä–æ–∫—Ä—É—Ç–∫—É –≤–æ –≤—Ä–µ–º—è —É–º–Ω–æ–π –ø—Ä–æ–∫—Ä—É—Ç–∫–∏
      if (isSmartScrollActive.value) return
      
      if (containerVisible.value && arrivedState.bottom && !isScrolling.value) {
        // –ù–µ–±–æ–ª—å—à–∞—è –∑–∞–¥–µ—Ä–∂–∫–∞ –¥–ª—è –æ–±–µ—Å–ø–µ—á–µ–Ω–∏—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è DOM
        nextTick(() => {
          if (canScrollToBottom.value) {
            scrollToBottom()
          }
        })
      }
    })
  }

  // –û—á–∏—Å—Ç–∫–∞ –∫—ç—à–∞ –ø—Ä–∏ —Ä–∞–∑–º–æ–Ω—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–∞
  onUnmounted(() => {
    elementCache.clear()
  })

  return {
    // –û—Å–Ω–æ–≤–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏
    scrollToBottom,
    scrollToElement,
    enableAutoScroll,

    // –ù–æ–≤—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏ –¥–ª—è —É–º–Ω–æ–π –ø—Ä–æ–∫—Ä—É—Ç–∫–∏
    enableSmartScroll,
    scrollAssistantTitleToBottom,
    scrollAssistantTitleToTop,

    // –°–æ—Å—Ç–æ—è–Ω–∏–µ –ø—Ä–æ–∫—Ä—É—Ç–∫–∏
    scrollY: readonly(scrollY),
    isScrolling: readonly(isScrolling),
    isScrolledToBottom,
    canScrollToBottom,
    arrivedState: readonly(arrivedState),
    directions: readonly(directions),

    // –°–æ—Å—Ç–æ—è–Ω–∏–µ —É–º–Ω–æ–π –ø—Ä–æ–∫—Ä—É—Ç–∫–∏
    isSmartScrollActive: readonly(isSmartScrollActive),

    // –í–∏–¥–∏–º–æ—Å—Ç—å –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–∞
    containerVisible: readonly(containerVisible),
  }
}
